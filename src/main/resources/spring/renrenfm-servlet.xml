<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!--1: 自动扫描组件，可以写多个。component-scan 默认扫描的注解类型是 @Component， 不过，在 @Component语义基础上细化后的 
		@Repository、 @Service 和 @Controller 也同样可以获得 component-scan 的青睐 -->
	<context:component-scan base-package="me.daoke.renrenfm.controller">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:exclude-filter type="annotation" expression="org.springframework.context.annotation.Configuration"/>
	</context:component-scan>

	<!--静态资源配置-->
	<mvc:resources mapping="/assets/**" location="/assets/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**" location="/js/" />

	<!-- <bean class ="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" 
		/> <bean class ="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		/> 2: <mvc:annotation-driven /> 是一种简写形式，完全可以手动配置替代这种简写形式，会自动注册 DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 
		两个bean, 是spring MVC为@Controllers分发请求所必须的。 -->
	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />



     <!--配置拦截器 打印日志信息-->
    <!--<mvc:interceptors>-->
        <!--<bean class="com.daoke.renrenfm.filter.LogSpringActionHandler"/>-->
    <!--</mvc:interceptors>-->
	<!-- Configures Handler Interceptors <mvc:interceptors> </mvc:interceptors> -->
<!-- 	<mvc:interceptors>
		日志记录拦截器
		<bean class ="*"></bean>
	</mvc:interceptors> -->
	
	<mvc:default-servlet-handler />
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<!-- json转换器 -->
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
				<value>text/json;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>



	<!--jsonView的ViewResolver <bean name="viewResolver" class="org.springframework.web.servlet.view.XmlViewResolver" 
		p:order="0"/> -->

	<!-- 3：对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/WEB-INF/" p:suffix=".jsp" />

	<!-- 4：Controller层异常处理 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->
        <property name="defaultErrorView" value="exception/exception_error"/>
        <property name="defaultStatusCode" value="500"></property>
		<property name="exceptionMappings">
			<props>
				<prop
					key="org.springframework.web.bind.MissingServletRequestParameterException">error/parameter_error</prop>
				<prop key="java.lang.RuntimeException">error/exception-error</prop>
                <prop key="java.lang.NullPointerException">error/exception-error</prop>
               <!-- <prop key="java.lang.IllegalArgumentException">error/parameter_error</prop> --> <!-- 参数错误(bizError.jsp) -->
            </props>
		</property>
	</bean>
	<!-- 限制上传文件大小 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8" />
		<property name="maxUploadSize" value="10485760000" />
		<property name="maxInMemorySize" value="40960" />
	</bean>


	<!-- 注册拦截器 -->
	<mvc:interceptors>

		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<mvc:exclude-mapping path="/sys/login"/>
			<mvc:exclude-mapping path="/sys/toLogin"/>
			<mvc:exclude-mapping path="/sys/loginCheck"/>
			<mvc:exclude-mapping path="/assets/font/fontawesome-webfont.ttf"/>
			<mvc:exclude-mapping path="/assets/font/fontawesome-webfont.woff"/>
			<bean class="me.daoke.renrenfm.interceptors.LoginInterceptor"></bean>
		</mvc:interceptor>

	</mvc:interceptors>

	<!-- 禁播定时器 -->
	<bean id="noPlay" class="me.daoke.renrenfm.timer.NoPlayQuartz" />

	<!-- quartz的调度工厂-->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref local="noPlayTrigger" />
			</list>
		</property>
	</bean>

	<!--配置调度执行的触发的时间-->
	<bean id="noPlayTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="noPlayDetail" />
		<property name="cronExpression">
			<!-- 每隔一个小时执行一次-->
			<value>0 0 */1 * * ? </value>
		</property>
	</bean>

	<bean id="noPlayDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="noPlay" />
		<property name="targetMethod" value="relievePlay" />
		<property name="concurrent" value="false" />
	</bean>


  <!--  <bean id="currTypes" class="java.util.HashMap">
        <constructor-arg>
            <map>
              &lt;!&ndash;  <entry key="LOGIN_URL">
                    <value>http://api.daoke.io/accountapi/v2/checkLogin</value>
                </entry>&ndash;&gt;
               &lt;!&ndash; <entry key="MirrtalkUSERINFO_URL">
                    <value>http://api.daoke.io/accountapi/v2/getUserInformation</value>
                </entry>&ndash;&gt;
               &lt;!&ndash; <entry key="GET_IMEI_PHONE">
                    <value>http://api.daoke.io/accountapi/v2/getImeiPhone</value>
                </entry>
                <entry key="UPDATE_MIRRTALK_USERINFO_URL">
                    <value>http://api.daoke.io/accountapi/v2/fixUserInfo</value>
                </entry>
                <entry key="GETVERIFICATIONCODE_URL">
                    <value>http://api.daoke.io/accountapi/v2/getMobileVerificationCode</value>
                </entry>
                <entry key="CHECKREGISTRATION_URL">
                    <value>http://api.daoke.io/accountapi/v2/checkRegistration</value>
                </entry>
                <entry key="ADDCUSTOMACCOUNT_URL">
                    <value>http://api.daoke.io/accountapi/v2/addCustomAccount</value>
                </entry>
                <entry key="GETLOCATION">
                    <value>http://api.daoke.io/mapapi/v2/getLocation</value>
                </entry>
                <entry key="BAIDU_URL">
                    <value>http://api.map.baidu.com/direction/v1</value>
                </entry>
                <entry key="VERIFY_MESSAGE_URL">
                    <value>帮忙拉的短信验证码为[code]，请在30分钟内输入有效！</value>
                </entry>&ndash;&gt;
                <entry key="PRICE">
                    <value>5</value>
                </entry>
                <entry key="TIME_PRICE">
                    <value>20</value>
                </entry>
                <entry key="SUPPORT_PRICE">
                    <value>25</value>
                </entry>
                <entry key="APP_VERSION">
                    <value>2</value>
                </entry>
            </map>
        </constructor-arg>
    </bean>

    <bean id="toolsUtils" class="com.daoke.mobileserver.util.ConstantsUtil" >
        <constructor-arg>
            <value>开始初始化工具类对象</value>
        </constructor-arg>
        &lt;!&ndash; 将常量注入单例对象中 &ndash;&gt;
        <property name="currTypes">
            <ref bean="currTypes" />
        </property>
    </bean>
-->

</beans>